# -----------------------------------------------------------------------------------------------------------
# Build g'

def build_g_tag(net, groups_on_grid, threshold):
    g_tag = nx.Graph()
    # Add vertices to the g_tag
    counter = 0
    for sq in groups_on_grid:
        if sq['degree'] != 0:
            g_tag.add_node(counter)
            sq['index_gtag'] = counter
            counter += 1
            print("g_tag point number:", sq['index_gtag'], "number of square:", sq['i'])
    # Run all over groups_on_grid in 2 loops
    # If they both sparse -> continue (we dont want to connect sparse square to each other)
    # Else : check if there is an edge between the two groups -> add edge between the squares to g_tag
    for sq1 in groups_on_grid:
        for sq2 in groups_on_grid:
            if sq1['degree'] <= threshold and sq2['degree'] <= threshold:
                continue
            if are_squares_connected(net, sq1, sq2):
                g_tag.add_edge(sq1['index_gtag'], sq2['index_gtag'])
    return g_tag
    
# -----------------------------------------------------------------------------------------------------------

def are_squares_connected(net, sq1, sq2):
    for p1 in sq1['arr_points']:
        for p2 in sq2['arr_points']:
            if net.is_at_edge_by_points(net.edges, p1.serial_number, p2.serial_number) == True:
                return True
    return False

# -----------------------------------------------------------------------------------------------------------
# Get a network, a point and list containing the friends of the square p where p is
# Return a list of flag two points assign to the current point

def build_pair(net, p, list_of_friends, curr_degree):
    in_out_list = []
    flag = 0
    for sq in list_of_friends:
        for point in sq['arr_points']:
            if net.is_at_edge_by_points(net.edges, point.serial_number, p.serial_number) == True:
                square_point_list = []
                square_point_list.append(sq)
                square_point_list(point)
                sq['degree'] -= 1
                in_out_list.append(square_point_list)
                if curr_degree == 1:
                    if flag == 1:
                        return in_out_list
                    flag = 1
                    continue
                else:
                    return in_out_list
    return in_out_list
    
 # -----------------------------------------------------------------------------------------------------------
# Get group and index and return the square of its index

def find_square_by_point(groups_on_grid, index):
    if index < 0 or index >= len(groups_on_grid):
        return np.nan
    for sq in groups_on_grid:
        if sq['index_gtag'] == index:
            return sq
    return np.nan


# -----------------------------------------------------------------------------------------------------------
# Return if the squares are friends

def is_friend(sparse_square, dense_square, r):
    for i in range(-2, 3):
        for j in range(-2, 3):
            '''print("dense_square['bnd_x_down'] :", dense_square['bnd_x_down'])
            print("sparse_square['bnd_x_down'] + i*(r/2) :", sparse_square['bnd_x_down'] + i*(r/2))
            print("dense_square['bnd_x_up'] :", dense_square['bnd_x_up'])
            print("sparse_square['bnd_x_up'] + i*(r/2) :", sparse_square['bnd_x_up'] + i*(r/2))
            print("dense_square['bnd_y_down'] :", dense_square['bnd_y_down'])
            print("sparse_square['bnd_y_down'] + i*(r/2) :", sparse_square['bnd_y_down'] + i*(r/2))
            print("dense_square['bnd_y_up'] :", dense_square['bnd_y_up'])
            print("sparse_square['bnd_y_up'] + i*(r/2) :", sparse_square['bnd_y_up'] + i*(r/2))'''
            if dense_square['bnd_x_down'] == sparse_square['bnd_x_down'] + i * (r / 2) and \
                    dense_square['bnd_x_up'] == sparse_square['bnd_x_up'] + i * (r / 2):
                if dense_square['bnd_y_down'] == sparse_square['bnd_y_down'] + j * (r / 2) and \
                        dense_square['bnd_y_up'] == sparse_square['bnd_y_up'] + j * (r / 2):
                    return True
    return False
    
    
# -----------------------------------------------------------------------------------------------------------
# Print functions

def print_squares_arr(squares_arr):
    for i, sq in enumerate(squares_arr):
        print("square number : i =", i)
        print_point_arr(sq)

def print_list_of_dict(list_of_dict):
    for i in range(len(list_of_dict)):
        print("i =", list_of_dict[i]['i'], ",boundaries of x:", list_of_dict[i]['bnd_x_down'], ",", list_of_dict[i]['bnd_x_up'], "boundaries of y:", list_of_dict[i]['bnd_y_down'],
              ",", list_of_dict[i]['bnd_y_up'])
        print_point_arr(list_of_dict[i]['arr_points'])

def print_point_arr(point_arr):
    for i in range(0, len(point_arr)):
        point_arr[i].print_point()

# -----------------------------------------------------------------------------------------------------------
# main

def main():
    r = 0.5
    n = 20
    net = ge_net.Network(r)
    for i in range(0, n):
        p = pnt.Point(i)
        net.add_vertex(p)
    net.make_edges()
    net.draw_network()
    groups_on_grid = divide_to_grid(net, r)
    print("========================================================================================")
    print("groups_on_grid:")
    print_list_of_dict(groups_on_grid)
    # Make sure num_of_squares is squared!!!!!!!!!!!!!!!!!!
    threshold = calculate_threshold(n, r)
    print("========================================================================================")
    print("threshold:", threshold)
    dense_group, sparse_group = divide_dense_from_sparse(groups_on_grid, n, r)
    print("========================================================================================")
    print("Dense group:")
    print_list_of_dict(dense_group)
    print("========================================================================================")
    print("Sparse group:")
    print_list_of_dict(sparse_group)
    # print("========================================================================================")
    # label_sparse_point_to_dense(net, groups_on_grid, dense_group, sparse_group, r)
    print("========================================================================================")
    g_tag = build_g_tag(net, groups_on_grid, threshold)
    nx.draw(g_tag, with_labels=True)
    plt.savefig("g_tag_drawing.png")
    plt.show()
    
    
if __name_ == '__main__':
    main()

'''groups = np.empty(shape=num_of_groups, dtype=np.ndarray)
    print(type(groups))
    arr = subgroup_by_condition(arr_of_nodes, 0, 0.25, 0, 0.25)
    groups = np.array([arr])
    print("arr:")
    print_point_arr(arr)
    groups = np.vstack((groups, arr))
    print("groups:")
    print_squares_arr(groups)
    arr1 = subgroup_by_condition(arr_of_nodes, 0.25, 0.5, 0.25, 0.5)
    print("arr1:")
    print_point_arr(arr1)
    groups = np.vstack((groups, arr1))
    print("groups:")
    print_squares_arr(groups)
    arr_of_nodes = np.array(net.nodes)
    print_point_arr(arr_of_nodes)
    temp = arr_of_nodes[(arr_of_nodes, )]
    groups = np.array(temp)
    groups = np.empty(num_of_groups)
    #groups[:] = np.nan
    p0 = pnt.Point(0)
    p1 = pnt.Point(1)
    arr1 = np.array([p0, p1])
    p2 = pnt.Point(2)
    p3 = pnt.Point(3)
    arr2 = np.array([p2, p3])
    arr = np.array([arr1])
    arr = np.vstack((arr, arr2))
    print_squares_arr(arr)'''
